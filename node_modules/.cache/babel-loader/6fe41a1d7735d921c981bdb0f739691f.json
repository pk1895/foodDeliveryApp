{"ast":null,"code":"var _jsxFileName = \"F:\\\\Prasad\\\\DEV\\\\Latest ReactJS\\\\myFoodApp\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price;\n    const existingCartItemIdx = state.items.findIndex(item => {\n      return item.id === action.item.id;\n    });\n    const existingCartItem = state.items[existingCartItemIdx];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIdx] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemIdx = state.items.findIndex(item => {\n      return item.id === action.id;\n    });\n    const existingCartItem = state.items[existingCartItemIdx];\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\n    let updatedItems;\n\n    if (existingCartItem.amount === 1) {\n      updatedItems = state.items.filter(item => {\n        return item.id !== action.id;\n      });\n    } else {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIdx] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'CLEAR') {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemHandler = item => {\n    dispatchAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemHandler = id => {\n    dispatchAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatchAction({\n      type: 'CLEAR'\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: {\n      addItemHandler\n    },\n    removeItem: {\n      removeItemHandler\n    },\n    clearCart: {\n      clearCartHandler\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"iJa8l0DbS7cczGklKxdg8hq5rUk=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["F:/Prasad/DEV/Latest ReactJS/myFoodApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","existingCartItemIdx","findIndex","id","existingCartItem","updatedItems","updatedItem","amount","concat","filter","CartProvider","props","cartState","dispatchAction","addItemHandler","removeItemHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACvB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAA3D;AACA,UAAMC,mBAAmB,GAAGN,KAAK,CAACH,KAAN,CAAYU,SAAZ,CAAsBH,IAAI,IAAI;AACtD,aAAOA,IAAI,CAACI,EAAL,KAAYP,MAAM,CAACG,IAAP,CAAYI,EAA/B;AACH,KAF2B,CAA5B;AAGA,UAAMC,gBAAgB,GAAGT,KAAK,CAACH,KAAN,CAAYS,mBAAZ,CAAzB;AAEA,QAAII,YAAJ;;AACA,QAAID,gBAAJ,EAAsB;AAClB,YAAME,WAAW,GAAG,EAChB,GAAGF,gBADa;AAEhBG,QAAAA,MAAM,EAAEH,gBAAgB,CAACG,MAAjB,GAA0B;AAFlB,OAApB;AAIAF,MAAAA,YAAY,GAAG,CAAC,GAAGV,KAAK,CAACH,KAAV,CAAf;AACAa,MAAAA,YAAY,CAACJ,mBAAD,CAAZ,GAAoCK,WAApC;AACH,KAPD,MAOO;AACHD,MAAAA,YAAY,GAAGV,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;AACH;;AAED,WAAO;AACHP,MAAAA,KAAK,EAAEa,YADJ;AAEHZ,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAKH;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAMI,mBAAmB,GAAGN,KAAK,CAACH,KAAN,CAAYU,SAAZ,CAAsBH,IAAI,IAAI;AACtD,aAAOA,IAAI,CAACI,EAAL,KAAYP,MAAM,CAACO,EAA1B;AACH,KAF2B,CAA5B;AAIA,UAAMC,gBAAgB,GAAGT,KAAK,CAACH,KAAN,CAAYS,mBAAZ,CAAzB;AACA,UAAMH,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBW,gBAAgB,CAACJ,KAAhE;AACA,QAAIK,YAAJ;;AACA,QAAID,gBAAgB,CAACG,MAAjB,KAA4B,CAAhC,EAAmC;AAC/BF,MAAAA,YAAY,GAAGV,KAAK,CAACH,KAAN,CAAYiB,MAAZ,CAAmBV,IAAI,IAAI;AACtC,eAAOA,IAAI,CAACI,EAAL,KAAYP,MAAM,CAACO,EAA1B;AACH,OAFc,CAAf;AAGH,KAJD,MAIO;AACH,YAAMG,WAAW,GAAG,EAAE,GAAGF,gBAAL;AAAuBG,QAAAA,MAAM,EAAEH,gBAAgB,CAACG,MAAjB,GAA0B;AAAzD,OAApB;AACAF,MAAAA,YAAY,GAAG,CAAC,GAAGV,KAAK,CAACH,KAAV,CAAf;AACAa,MAAAA,YAAY,CAACJ,mBAAD,CAAZ,GAAoCK,WAApC;AACH;;AAED,WAAO;AACHd,MAAAA,KAAK,EAAEa,YADJ;AAEHZ,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAIH;;AACD,MAAGF,MAAM,CAACC,IAAP,KAAc,OAAjB,EAAyB;AACrB,WAAON,gBAAP;AACH;;AACD,SAAOA,gBAAP;AACH,CArDD;;AAuDA,MAAMmB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM,CAACC,SAAD,EAAYC,cAAZ,IAA8BxB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAA9C;;AAEA,QAAMuB,cAAc,GAAGf,IAAI,IAAI;AAC3Bc,IAAAA,cAAc,CAAC;AAAEhB,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAd;AACH,GAFD;;AAGA,QAAMgB,iBAAiB,GAAGZ,EAAE,IAAI;AAC5BU,IAAAA,cAAc,CAAC;AAAEhB,MAAAA,IAAI,EAAE,QAAR;AAAkBM,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAd;AACH,GAFD;;AAGA,QAAMa,gBAAgB,GAAG,MAAI;AACzBH,IAAAA,cAAc,CAAC;AAAEhB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAd;AACH,GAFD;;AAIA,QAAMoB,WAAW,GAAG;AAChBzB,IAAAA,KAAK,EAAEoB,SAAS,CAACpB,KADD;AAEhBC,IAAAA,WAAW,EAAEmB,SAAS,CAACnB,WAFP;AAGhByB,IAAAA,OAAO,EAAE;AAAEJ,MAAAA;AAAF,KAHO;AAIhBK,IAAAA,UAAU,EAAE;AAAEJ,MAAAA;AAAF,KAJI;AAKhBK,IAAAA,SAAS,EAAE;AAACJ,MAAAA;AAAD;AALK,GAApB;AAQA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACKN,KAAK,CAACU;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BD;;GAAMX,Y;;KAAAA,Y;AA4BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from 'react';\r\nimport CartContext from './cart-context';\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0\r\n}\r\n\r\nconst cartReducer = (state, action) => {\r\n    if (action.type === 'ADD') {\r\n        const updatedTotalAmount = state.totalAmount + action.item.price;\r\n        const existingCartItemIdx = state.items.findIndex(item => {\r\n            return item.id === action.item.id\r\n        });\r\n        const existingCartItem = state.items[existingCartItemIdx];\r\n\r\n        let updatedItems;\r\n        if (existingCartItem) {\r\n            const updatedItem = {\r\n                ...existingCartItem,\r\n                amount: existingCartItem.amount + 1\r\n            };\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIdx] = updatedItem;\r\n        } else {\r\n            updatedItems = state.items.concat(action.item);\r\n        }\r\n\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        }\r\n\r\n    }\r\n    if (action.type === 'REMOVE') {\r\n        const existingCartItemIdx = state.items.findIndex(item => {\r\n            return item.id === action.id\r\n        });\r\n\r\n        const existingCartItem = state.items[existingCartItemIdx];\r\n        const updatedTotalAmount = state.totalAmount - existingCartItem.price;\r\n        let updatedItems;\r\n        if (existingCartItem.amount === 1) {\r\n            updatedItems = state.items.filter(item => {\r\n                return item.id !== action.id;\r\n            });\r\n        } else {\r\n            const updatedItem = { ...existingCartItem, amount: existingCartItem.amount - 1 };\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIdx] = updatedItem;\r\n        }\r\n\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        }\r\n    }\r\n    if(action.type==='CLEAR'){\r\n        return defaultCartState;\r\n    }\r\n    return defaultCartState;\r\n}\r\n\r\nconst CartProvider = (props) => {\r\n    const [cartState, dispatchAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n    const addItemHandler = item => {\r\n        dispatchAction({ type: 'ADD', item: item });\r\n    };\r\n    const removeItemHandler = id => {\r\n        dispatchAction({ type: 'REMOVE', id: id });\r\n    };\r\n    const clearCartHandler = ()=>{\r\n        dispatchAction({ type: 'CLEAR'});\r\n    }\r\n\r\n    const cartContext = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: { addItemHandler },\r\n        removeItem: { removeItemHandler },\r\n        clearCart: {clearCartHandler}\r\n    };\r\n\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    );\r\n}\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}